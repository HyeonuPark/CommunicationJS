#!/usr/bin/env node
/**
 * check this browser support this implementation
 * @type {Boolean}
 */
export const support

/**
 * ConnectionImpl interface
 */
class ConnectionImpl {
  /**
   * receive message from signalling channel
   * @param  {String} msg
   */
  write (msg)

  /**
   * only for sender
   * start connecting
   */
  open ()

  /**
   * check whether this ConnectionImpl is sender or receiver
   * @return {Boolean} true if sender
   */
  isSender ()

  /**
   * get MediaStream of this ConnectionImpl
   * @return {MediaStream}
   *         local stream if sender
   *         remote stream if receiver
   *         null if stream is not arrived
   */
  getStream ()

  /**
   * get ID of this ConnectionImpl
   * @return {String}
   *         if sender, MediaStream.id
   *         if receiver, same as matching remote sender
   *
   */
  getId ()

  /**
   * close connection
   */
  close ()

  on(event, handler)
  once(event, handler)
  off(event, handler)
  emit(event, ...params)

  /**
   * Event summary
   *
   * 	stream:
   * 		remote stream is arrived to receiver
   * 		@arg: {MediaStream} arrived stream
   *
   * 	message:
   * 		have a message to send via signaling channel
   * 		@arg: {String} message
   *
   * 	closed:
   * 		this connection is closed
   */
}

/**
 * start connection
 * @param  {MediaStream} stream
 * @param  {Object} config
 * @return {ConnectionImpl} sender
 */
export function connect (stream, config)

/**
 * receive remote peer's connection request
 * @param  {object} config
 * @return {ConnectionImpl} receiver
 */
export function receive (id, config)
